technique [
    name = "diffuse"
    ps_main="ps_main"
    vs_main="vs_main"
    class_name="DiffuseEffect"
           ];

struct DirLight {
  vec4 dir;
  vec4 diffuse;
  vec4 ambient;
};

[uniform_func="SetPVW"] uniform mat4 pvw;
[uniform_func="SetWorld"] uniform mat4 world;
[uniform_func="SetDirLight"] uniform DirLight light;
[uniform_func="SetTexture"] uniform Texture2D tex;
[uniform_func="SetBumpTex"] uniform Texture2D bump_tex;

exchange struct VsOutput {
  [semantic="position" system="true"]
  vec4 position;
  vec2 tex0;
  vec4 normal;
  vec4 tangent;
  vec4 binormal;
};

exchange struct VSInput {
  vec3 position;
  vec2 tex0;
  vec3 normal;
  vec3 tangent;
  vec3 binormal;
};

VsOutput vs_main(VSInput input) {
  VsOutput o;
  o.position = pvw * vec4(input.position, 1.0f);
  o.normal = world * vec4(input.normal, 0.0);
  o.tangent = world * vec4(input.tangent, 0.0);
  o.binormal = world * vec4(input.binormal, 0.0);
  o.tex0 = input.tex0;
  return o;
}

[system="true" semantic="target"]
vec4 ps_main(VsOutput o) {
  vec4 bn = sample2D(bump_tex, o.tex0);
  bn = bn * 2.0f - 1.0f;
  vec4 normal = bn.x * o.tangent + bn.y * o.binormal + bn.z * o.normal;

  vec4 color = sample2D(tex, o.tex0);
  float diffuse_factor = clamp(dot(normalize(normal.xyz), -light.dir.xyz),
                               0.0, 1.0);
  vec3 light_factor = light.ambient.xyz + light.diffuse.xyz * diffuse_factor;
  return vec4(light_factor.xyz, 1.0) * color;
}

