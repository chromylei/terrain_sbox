#include "tersbox/base/light.afxi"

technique [
    name = "water"
    ps_main="ps_main"
    vs_main="vs_main"
    class_name="WaterEffect"
           ];

[uniform_func="SetPVW"] uniform mat4 pvw;
[uniform_func="SetReflectPVW"] uniform mat4 reflect_pvw;
[uniform_func="SetDirLight"] uniform sbox::DirLight light;
[uniform_func="SetRefractTex"] uniform Texture2D refract_tex;
[uniform_func="SetReflectTex"] uniform Texture2D reflect_tex;
[uniform_func="SetBumpTex"] uniform Texture2D bump_tex;
[uniform_func="SetCameraPos"] uniform vec3 camerapos;
[uniform_func="SetTime"] uniform float time;

exchange struct VsOutput {
  [semantic="position" system="true"]
  vec4 position;
  vec2 tex0;
  vec2 tex1;
  vec2 tex2;
  vec4 refract_position;
  vec4 reflect_position;
  vec3 viewdir;
};

exchange struct VSInput {
  vec3 position;
  vec2 tex0;
  vec2 tex1;
  vec2 tex2;
};

VsOutput vs_main(VSInput input) {
  VsOutput o;
  o.position = pvw * vec4(input.position, 1.0f);
  o.tex0 = input.tex0;
  o.tex1 = input.tex1 + time;
  o.tex2 = input.tex2;
  o.refract_position = pvw * vec4(input.position, 1.0);
  o.reflect_position = reflect_pvw * vec4(input.position, 1.0);
  o.viewdir = camerapos - input.position;
  return o;
}

[system="true" semantic="target"]
vec4 ps_main(VsOutput o) {
  float reflect_scale = 0.03;
  vec4 bn1 = sample2D(bump_tex, o.tex1);
  vec4 bn2 = sample2D(bump_tex, o.tex2);
  vec3 n1 = bn1.rgb * 2.0f - 1.0f;
  vec3 n2 = bn2.rgb * 2.0f - 1.0f;
  vec3 normal = normalize(n1 + n2);

  vec4 refract_tint = vec4(0.0f, 0.8f, 1.0f, 1.0f);
  vec2 refract_texcoord;
  refract_texcoord.x = o.refract_position.x / o.refract_position.w / 2.0f + 0.5f;
  refract_texcoord.y = -o.refract_position.y / o.refract_position.w / 2.0f + 0.5f;
  // refract_texcoord = refract_texcoord + normal.xy * reflect_scale;
  vec4 refract_color = sample2D(refract_tex, refract_texcoord) * refract_tint;

  vec2 reflect_texcoord;
  reflect_texcoord.x = o.reflect_position.x / o.reflect_position.w / 2.0f + 0.5f;
  reflect_texcoord.y = -o.reflect_position.y / o.reflect_position.w / 2.0f + 0.5f;
  // reflect_texcoord = reflect_texcoord + normal.xy * reflect_scale;
  vec4 reflect_color = sample2D(reflect_tex, reflect_texcoord);

  vec3 heightview = normalize(vec3(o.viewdir.yyy));
  float r = (1.2f - 1.0f) / (1.2f + 1.0f);

  float factor = max(0.0f, min(1.0f, r + (1.0f - r) *
                               pow(1.0f - dot(normal, heightview), 2)));
  vec4 color = lerp(refract_color, reflect_color, factor);
  float diffuse_factor = clamp(dot(normal, normalize(-light.dir.xyz)), 0.0, 1.0);
  vec3 light_factor = light.ambient.xyz + light.diffuse.xyz * diffuse_factor;
  return vec4(light_factor.xyz * color.xyz, 1.0);
}

