#include "tersbox/base/light.afxi"

technique [
    name = "water"
    ps_main="ps_main"
    vs_main="vs_main"
    class_name="WaterEffect"
           ];

[uniform_func="SetPVW"] uniform mat4 pvw;
[uniform_func="SetDirLight"] uniform sbox::DirLight light;
[uniform_func="SetRefractTex"] uniform Texture2D refract_tex;
[uniform_func="SetBumpTex"] uniform Texture2D bump_tex;
[uniform_func="SetTime"] uniform float time;

exchange struct VsOutput {
  [semantic="position" system="true"]
  vec4 position;
  vec2 tex0;
  vec4 normal;
  vec4 tangent;
  vec4 binormal;
  vec4 refract_position;
};

exchange struct VSInput {
  vec3 position;
  vec2 tex0;
  vec3 normal;
  vec3 tangent;
  vec3 binormal;
};

VsOutput vs_main(VSInput input) {
  VsOutput o;
  o.position = pvw * vec4(input.position, 1.0f);
  o.tex0 = input.tex0 + time;
  o.refract_position = pvw * vec4(input.position, 1.0);
  
  o.normal =   vec4(input.normal, 0.0);
  o.tangent =  vec4(input.tangent, 0.0);
  o.binormal = vec4(input.binormal, 0.0);
  return o;
}

[system="true" semantic="target"]
vec4 ps_main(VsOutput o) {
  vec2 refract_texcoord;
  refract_texcoord.x = o.refract_position.x / o.refract_position.w / 2.0f + 0.5f;
  refract_texcoord.y = -o.refract_position.y / o.refract_position.w / 2.0f + 0.5f;
  vec4 refract_color = sample2D(refract_tex, refract_texcoord);
  vec4 color = refract_color;
  vec4 bn = sample2D(bump_tex, o.tex0);
  vec3 normal = normalize(bn.xyz * 2.0f - 1.0f);
  normal = normalize(bn.x * o.tangent.xyz + bn.y * o.binormal.xyz + o.normal.xyz);

  // vec4 normal = vec4(0.0f, 1.0f, 0.0f, 0.0f);
  float diffuse_factor = clamp(dot(normal, -light.dir.xyz), 0.0, 1.0);
  vec3 light_factor = light.ambient.xyz + light.diffuse.xyz * diffuse_factor;
  return vec4(light_factor.xyz * color.xyz, 1.0);
}

